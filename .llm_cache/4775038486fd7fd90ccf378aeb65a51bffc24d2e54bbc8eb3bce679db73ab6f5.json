{"prompt": "\n        Genereer Jest/React Testing Library test code voor de AgentCard component.\n        \n        Component:\n        {\n  \"name\": \"AgentCard\",\n  \"type\": \"shared\",\n  \"description\": \"Individual agent card\",\n  \"props\": [\n    \"agent\"\n  ],\n  \"children\": []\n}\n        \n        Test requirements:\n        - Component rendering\n        - Props validation\n        - User interactions\n        - Accessibility\n        - Error states\n        \n        Genereer alleen de test code, geen uitleg.\n        ", "answer": "```javascript\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport AgentCard from './AgentCard'; // Zorg ervoor dat je het juiste pad gebruikt\nimport '@testing-library/jest-dom/extend-expect';\n\ndescribe('AgentCard Component', () => {\n    const mockAgent = {\n        name: \"Agent Smith\",\n        role: \"Field Agent\",\n        status: \"Active\",\n    };\n\n    test('renders AgentCard component', () => {\n        render(<AgentCard agent={mockAgent} />);\n        expect(screen.getByText(/Agent Smith/i)).toBeInTheDocument();\n        expect(screen.getByText(/Field Agent/i)).toBeInTheDocument();\n    });\n\n    test('validates props', () => {\n        const { rerender } = render(<AgentCard agent={null} />);\n        expect(screen.queryByText(/Agent Smith/i)).not.toBeInTheDocument();\n\n        rerender(<AgentCard agent={mockAgent} />);\n        expect(screen.getByText(/Agent Smith/i)).toBeInTheDocument();\n    });\n\n    test('handles user interactions', () => {\n        const handleClick = jest.fn();\n        render(<AgentCard agent={mockAgent} onClick={handleClick} />);\n        \n        fireEvent.click(screen.getByText(/Agent Smith/i));\n        expect(handleClick).toHaveBeenCalled();\n    });\n\n    test('ensures accessibility', () => {\n        const { container } = render(<AgentCard agent={mockAgent} />);\n        expect(container).toBeAccessible(); // Voor de toegankelijkheidstest, gebruik een geschikte bibliotheek zoals jest-axe\n    });\n\n    test('displays error state', () => {\n        const { rerender } = render(<AgentCard agent={{ ...mockAgent, status: 'Error' }} />);\n        expect(screen.getByText(/Error/i)).toBeInTheDocument();\n\n        rerender(<AgentCard agent={mockAgent} />);\n        expect(screen.queryByText(/Error/i)).not.toBeInTheDocument();\n    });\n});\n```", "llm_confidence": 0.5}