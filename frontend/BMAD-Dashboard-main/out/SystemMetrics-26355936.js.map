{"version":3,"file":"SystemMetrics-26355936.js","sources":["../../node_modules/lucide-react/dist/esm/icons/check-circle.js","../../node_modules/lucide-react/dist/esm/icons/download.js","../../node_modules/lucide-react/dist/esm/icons/server.js","../../node_modules/lucide-react/dist/esm/icons/x-circle.js","../../src/components/ui/ErrorDisplay.tsx","../../src/components/ui/PerformanceTest.tsx","../../src/components/v1/SystemMetrics.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CheckCircle = createLucideIcon(\"CheckCircle\", [\n  [\"path\", { d: \"M22 11.08V12a10 10 0 1 1-5.93-9.14\", key: \"g774vq\" }],\n  [\"path\", { d: \"m9 11 3 3L22 4\", key: \"1pflzl\" }]\n]);\n\nexport { CheckCircle as default };\n//# sourceMappingURL=check-circle.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Download = createLucideIcon(\"Download\", [\n  [\"path\", { d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\", key: \"ih7n3h\" }],\n  [\"polyline\", { points: \"7 10 12 15 17 10\", key: \"2ggqvy\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"15\", y2: \"3\", key: \"1vk2je\" }]\n]);\n\nexport { Download as default };\n//# sourceMappingURL=download.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Server = createLucideIcon(\"Server\", [\n  [\"rect\", { width: \"20\", height: \"8\", x: \"2\", y: \"2\", rx: \"2\", ry: \"2\", key: \"ngkwjq\" }],\n  [\"rect\", { width: \"20\", height: \"8\", x: \"2\", y: \"14\", rx: \"2\", ry: \"2\", key: \"iecqi9\" }],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"6\", y2: \"6\", key: \"16zg32\" }],\n  [\"line\", { x1: \"6\", x2: \"6.01\", y1: \"18\", y2: \"18\", key: \"nzw8ys\" }]\n]);\n\nexport { Server as default };\n//# sourceMappingURL=server.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst XCircle = createLucideIcon(\"XCircle\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"m15 9-6 6\", key: \"1uzhvr\" }],\n  [\"path\", { d: \"m9 9 6 6\", key: \"z0biqf\" }]\n]);\n\nexport { XCircle as default };\n//# sourceMappingURL=x-circle.js.map\n","// Error Display Component - User-friendly error messages\r\nimport React from 'react'\r\nimport { AlertTriangle, RefreshCw, Wifi, Server } from 'lucide-react'\r\nimport { cn } from '@/lib/utils'\r\n\r\ninterface ErrorDisplayProps {\r\n  error: string | null\r\n  onRetry?: () => void\r\n  variant?: 'inline' | 'card' | 'fullscreen'\r\n  className?: string\r\n}\r\n\r\nexport const ErrorDisplay: React.FC<ErrorDisplayProps> = ({\r\n  error,\r\n  onRetry,\r\n  variant = 'inline',\r\n  className\r\n}) => {\r\n  if (!error) return null\r\n\r\n  // Determine error type and icon\r\n  const getErrorIcon = (errorMessage: string) => {\r\n    if (errorMessage.includes('timeout') || errorMessage.includes('niet bereikbaar')) {\r\n      return <Wifi className=\"w-5 h-5\" />\r\n    }\r\n    if (errorMessage.includes('Server error')) {\r\n      return <Server className=\"w-5 h-5\" />\r\n    }\r\n    return <AlertTriangle className=\"w-5 h-5\" />\r\n  }\r\n\r\n  const getErrorColor = (errorMessage: string) => {\r\n    if (errorMessage.includes('timeout') || errorMessage.includes('niet bereikbaar')) {\r\n      return 'border-yellow-500/20 bg-yellow-500/10 text-yellow-700'\r\n    }\r\n    if (errorMessage.includes('Server error')) {\r\n      return 'border-red-500/20 bg-red-500/10 text-red-700'\r\n    }\r\n    return 'border-orange-500/20 bg-orange-500/10 text-orange-700'\r\n  }\r\n\r\n  const getErrorMessage = (errorMessage: string) => {\r\n    if (errorMessage.includes('timeout') || errorMessage.includes('niet bereikbaar')) {\r\n      return 'Verbinding met server verloren. Controleer je internetverbinding.'\r\n    }\r\n    if (errorMessage.includes('Server error')) {\r\n      return 'Server probleem gedetecteerd. Probeer het later opnieuw.'\r\n    }\r\n    return 'Er is een fout opgetreden. Probeer de pagina te verversen.'\r\n  }\r\n\r\n  const errorIcon = getErrorIcon(error)\r\n  const errorColor = getErrorColor(error)\r\n  const userMessage = getErrorMessage(error)\r\n\r\n  if (variant === 'fullscreen') {\r\n    return (\r\n      <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\r\n        <div className={cn(\r\n          \"bg-card rounded-2xl p-8 shadow-lg border max-w-2xl w-full text-center\",\r\n          errorColor\r\n        )}>\r\n          <div className=\"flex justify-center mb-6\">\r\n            <div className=\"p-4 rounded-full bg-current/10\">\r\n              {errorIcon}\r\n            </div>\r\n          </div>\r\n          <h2 className=\"text-xl font-semibold mb-4\">Verbinding Probleem</h2>\r\n          <p className=\"text-sm mb-6\">{userMessage}</p>\r\n          {onRetry && (\r\n            <button\r\n              onClick={onRetry}\r\n              className=\"inline-flex items-center space-x-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors\"\r\n            >\r\n              <RefreshCw className=\"w-4 h-4\" />\r\n              <span>Opnieuw proberen</span>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (variant === 'card') {\r\n    return (\r\n      <div className={cn(\r\n        \"bg-card rounded-2xl p-6 shadow-lg border\",\r\n        errorColor,\r\n        className\r\n      )}>\r\n        <div className=\"flex items-start space-x-4\">\r\n          <div className=\"flex-shrink-0\">\r\n            {errorIcon}\r\n          </div>\r\n          <div className=\"flex-1\">\r\n            <h3 className=\"font-semibold mb-2\">Verbinding Probleem</h3>\r\n            <p className=\"text-sm mb-4\">{userMessage}</p>\r\n            {onRetry && (\r\n              <button\r\n                onClick={onRetry}\r\n                className=\"inline-flex items-center space-x-2 px-3 py-1.5 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors text-sm\"\r\n              >\r\n                <RefreshCw className=\"w-3 h-3\" />\r\n                <span>Opnieuw proberen</span>\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Inline variant (default)\r\n  return (\r\n    <div className={cn(\r\n      \"flex items-center space-x-3 p-3 rounded-lg border\",\r\n      errorColor,\r\n      className\r\n    )}>\r\n      {errorIcon}\r\n      <div className=\"flex-1\">\r\n        <p className=\"text-sm font-medium\">{userMessage}</p>\r\n      </div>\r\n      {onRetry && (\r\n        <button\r\n          onClick={onRetry}\r\n          className=\"flex-shrink-0 p-1 rounded hover:bg-current/10 transition-colors\"\r\n          title=\"Opnieuw proberen\"\r\n        >\r\n          <RefreshCw className=\"w-4 h-4\" />\r\n        </button>\r\n      )}\r\n    </div>\r\n  )\r\n} ","// Performance Test Component - Systematic performance testing\r\nimport React, { useState, useCallback } from 'react'\r\nimport { Play, Square, CheckCircle, XCircle, Clock, Zap } from 'lucide-react'\r\nimport { cn } from '@/lib/utils'\r\n\r\ninterface TestResult {\r\n  name: string\r\n  status: 'pending' | 'running' | 'passed' | 'failed'\r\n  duration?: number\r\n  error?: string\r\n}\r\n\r\ninterface PerformanceTestProps {\r\n  onComplete?: (results: TestResult[]) => void\r\n  className?: string\r\n}\r\n\r\nexport const PerformanceTest: React.FC<PerformanceTestProps> = ({\r\n  onComplete,\r\n  className\r\n}) => {\r\n  const [isRunning, setIsRunning] = useState(false)\r\n  const [results, setResults] = useState<TestResult[]>([])\r\n  const [currentTest, setCurrentTest] = useState<string | null>(null)\r\n\r\n  // Test definitions\r\n  const tests: Array<{\r\n    name: string\r\n    test: () => Promise<{ success: boolean; duration: number; error?: string }>\r\n  }> = [\r\n    {\r\n      name: 'Page Load Time',\r\n      test: async () => {\r\n        const start = performance.now()\r\n        \r\n        // Simulate page load\r\n        await new Promise(resolve => setTimeout(resolve, 100))\r\n        \r\n        const duration = performance.now() - start\r\n        return {\r\n          success: duration < 2000, // 2 seconds threshold\r\n          duration,\r\n          error: duration >= 2000 ? `Page load took ${duration.toFixed(0)}ms (threshold: 2000ms)` : undefined\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: 'API Response Time',\r\n      test: async () => {\r\n        const start = performance.now()\r\n        \r\n        try {\r\n          const response = await fetch('/api/health', {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' }\r\n          })\r\n          \r\n          const duration = performance.now() - start\r\n          return {\r\n            success: response.ok && duration < 500, // 500ms threshold\r\n            duration,\r\n            error: !response.ok ? `API returned ${response.status}` : \r\n                   duration >= 500 ? `API took ${duration.toFixed(0)}ms (threshold: 500ms)` : undefined\r\n          }\r\n        } catch (error) {\r\n          const duration = performance.now() - start\r\n          return {\r\n            success: false,\r\n            duration,\r\n            error: `API connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n          }\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: 'Memory Usage',\r\n      test: async () => {\r\n        const start = performance.now()\r\n        \r\n        // Check memory if available\r\n        if ('memory' in performance) {\r\n          const memory = (performance as any).memory\r\n          const memoryUsageMB = memory.usedJSHeapSize / (1024 * 1024)\r\n          \r\n          const duration = performance.now() - start\r\n          return {\r\n            success: memoryUsageMB < 100, // 100MB threshold\r\n            duration,\r\n            error: memoryUsageMB >= 100 ? `Memory usage: ${memoryUsageMB.toFixed(1)}MB (threshold: 100MB)` : undefined\r\n          }\r\n        }\r\n        \r\n        const duration = performance.now() - start\r\n        return {\r\n          success: true, // Can't test memory\r\n          duration,\r\n          error: 'Memory API not available'\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: 'Smooth Scrolling',\r\n      test: async () => {\r\n        const start = performance.now()\r\n        \r\n        // Simulate scroll performance test\r\n        const scrollTest = () => {\r\n          return new Promise<boolean>((resolve) => {\r\n            let frameCount = 0\r\n            let lastTime = performance.now()\r\n            \r\n            const testScroll = () => {\r\n              frameCount++\r\n              const currentTime = performance.now()\r\n              \r\n              if (currentTime - lastTime >= 1000) { // 1 second test\r\n                const fps = frameCount / ((currentTime - lastTime) / 1000)\r\n                resolve(fps >= 30) // 30 FPS threshold\r\n                return\r\n              }\r\n              \r\n              requestAnimationFrame(testScroll)\r\n            }\r\n            \r\n            requestAnimationFrame(testScroll)\r\n          })\r\n        }\r\n        \r\n        const isSmooth = await scrollTest()\r\n        const duration = performance.now() - start\r\n        \r\n        return {\r\n          success: isSmooth,\r\n          duration,\r\n          error: !isSmooth ? 'Scrolling performance below 30 FPS' : undefined\r\n        }\r\n      }\r\n    },\r\n    {\r\n      name: 'Component Rendering',\r\n      test: async () => {\r\n        const start = performance.now()\r\n        \r\n        // Simulate component rendering test\r\n        await new Promise(resolve => setTimeout(resolve, 50))\r\n        \r\n        const duration = performance.now() - start\r\n        return {\r\n          success: duration < 100, // 100ms threshold for component rendering\r\n          duration,\r\n          error: duration >= 100 ? `Component rendering took ${duration.toFixed(0)}ms (threshold: 100ms)` : undefined\r\n        }\r\n      }\r\n    }\r\n  ]\r\n\r\n  const runTest = useCallback(async (test: typeof tests[0]) => {\r\n    setCurrentTest(test.name)\r\n    \r\n    try {\r\n      const result = await test.test()\r\n      \r\n      setResults(prev => prev.map(r => \r\n        r.name === test.name \r\n          ? { ...r, status: result.success ? 'passed' : 'failed', duration: result.duration, error: result.error }\r\n          : r\r\n      ))\r\n    } catch (error) {\r\n      setResults(prev => prev.map(r => \r\n        r.name === test.name \r\n          ? { ...r, status: 'failed', error: error instanceof Error ? error.message : 'Unknown error' }\r\n          : r\r\n      ))\r\n    }\r\n  }, [])\r\n\r\n  const runAllTests = useCallback(async () => {\r\n    setIsRunning(true)\r\n    setResults(tests.map(test => ({ name: test.name, status: 'pending' })))\r\n    \r\n    for (const test of tests) {\r\n      await runTest(test)\r\n      // Small delay between tests\r\n      await new Promise(resolve => setTimeout(resolve, 100))\r\n    }\r\n    \r\n    setIsRunning(false)\r\n    setCurrentTest(null)\r\n    \r\n    if (onComplete) {\r\n      onComplete(results)\r\n    }\r\n  }, [tests, runTest, onComplete, results])\r\n\r\n  const stopTests = useCallback(() => {\r\n    setIsRunning(false)\r\n    setCurrentTest(null)\r\n  }, [])\r\n\r\n  const passedTests = results.filter(r => r.status === 'passed').length\r\n  const totalTests = results.length\r\n\r\n  return (\r\n    <div className={cn(\r\n      \"bg-card rounded-2xl p-6 shadow-lg border border-border\",\r\n      className\r\n    )}>\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold text-card-foreground\">Performance Tests</h3>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {isRunning ? 'Running tests...' : `${passedTests}/${totalTests} tests passed`}\r\n          </p>\r\n        </div>\r\n        \r\n        <div className=\"flex space-x-2\">\r\n          {!isRunning ? (\r\n            <button\r\n              onClick={runAllTests}\r\n              className=\"inline-flex items-center space-x-2 px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors\"\r\n            >\r\n              <Play className=\"w-4 h-4\" />\r\n              <span>Run Tests</span>\r\n            </button>\r\n          ) : (\r\n            <button\r\n              onClick={stopTests}\r\n              className=\"inline-flex items-center space-x-2 px-4 py-2 bg-destructive text-destructive-foreground rounded-lg hover:bg-destructive/90 transition-colors\"\r\n            >\r\n              <Square className=\"w-4 h-4\" />\r\n              <span>Stop</span>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"space-y-3\">\r\n        {tests.map((test) => {\r\n          const result = results.find(r => r.name === test.name)\r\n          const isCurrent = currentTest === test.name\r\n          \r\n          return (\r\n            <div\r\n              key={test.name}\r\n              className={cn(\r\n                \"flex items-center justify-between p-3 rounded-lg border\",\r\n                result?.status === 'passed' ? \"bg-green-500/10 border-green-500/20\" :\r\n                result?.status === 'failed' ? \"bg-red-500/10 border-red-500/20\" :\r\n                isCurrent ? \"bg-blue-500/10 border-blue-500/20\" :\r\n                \"bg-muted/50 border-border\"\r\n              )}\r\n            >\r\n              <div className=\"flex items-center space-x-3\">\r\n                {result?.status === 'passed' ? (\r\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n                ) : result?.status === 'failed' ? (\r\n                  <XCircle className=\"w-4 h-4 text-red-500\" />\r\n                ) : isCurrent ? (\r\n                  <Clock className=\"w-4 h-4 text-blue-500 animate-spin\" />\r\n                ) : (\r\n                  <div className=\"w-4 h-4 rounded-full border-2 border-muted-foreground\" />\r\n                )}\r\n                \r\n                <div>\r\n                  <div className=\"font-medium text-sm\">{test.name}</div>\r\n                  {result?.error && (\r\n                    <div className=\"text-xs text-red-600\">{result.error}</div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              \r\n              {result?.duration && (\r\n                <div className=\"flex items-center space-x-1 text-xs text-muted-foreground\">\r\n                  <Zap className=\"w-3 h-3\" />\r\n                  <span>{result.duration.toFixed(0)}ms</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n} ","// SystemMetrics Component - Real-time system health monitoring (Shadcn/ui compatible)\r\nimport React, { useState, memo } from 'react'\r\nimport { \r\n  Cpu, \r\n  HardDrive, \r\n  TrendingUp,\r\n  Download\r\n} from 'lucide-react'\r\nimport { useSystemMetrics } from '@/hooks/useSystemMetrics'\r\nimport { PageHeader } from '@/components/ui/PageHeader'\r\nimport { ErrorDisplay } from '@/components/ui/ErrorDisplay'\r\nimport { PerformanceTest } from '@/components/ui/PerformanceTest'\r\nimport { cn } from '@/lib/utils'\r\n\r\n// Alert thresholds\r\nconst ALERT_THRESHOLDS = {\r\n  cpu: { warning: 70, critical: 90 },\r\n  memory: { warning: 80, critical: 95 }\r\n}\r\n\r\n// Get alert status\r\nconst getAlertStatus = (value: number, thresholds: { warning: number; critical: number }) => {\r\n  if (value >= thresholds.critical) return 'critical'\r\n  if (value >= thresholds.warning) return 'warning'\r\n  return 'normal'\r\n}\r\n\r\n// Get alert color\r\nconst getAlertColor = (status: string) => {\r\n  switch (status) {\r\n    case 'critical': return 'text-red-500 bg-red-500/10'\r\n    case 'warning': return 'text-yellow-500 bg-yellow-500/10'\r\n    default: return 'text-green-500 bg-green-500/10'\r\n  }\r\n}\r\n\r\n// Get alert icon\r\nconst getAlertIcon = (status: string) => {\r\n  switch (status) {\r\n    case 'critical': return '🔴'\r\n    case 'warning': return '🟡'\r\n    default: return '🟢'\r\n  }\r\n}\r\n\r\n// Progress Bar Component\r\nconst ProgressBar: React.FC<{ value: number; status: string }> = ({ value, status }) => (\r\n  <div className=\"w-full bg-muted rounded-full h-2 mb-2\">\r\n    <div\r\n      className={cn(\r\n        \"h-2 rounded-full transition-all duration-300\",\r\n        status === 'critical' ? \"bg-red-500\" :\r\n        status === 'warning' ? \"bg-yellow-500\" : \"bg-green-500\"\r\n      )}\r\n      style={{ width: `${Math.min(value, 100)}%` }}\r\n    />\r\n  </div>\r\n)\r\n\r\n// Metric Card Component\r\nconst MetricCard: React.FC<{\r\n  icon: React.ComponentType<{ className?: string }>\r\n  title: string\r\n  value: string | number\r\n  status: string\r\n  description: string\r\n  badge: string\r\n  badgeColor: string\r\n}> = ({ icon: Icon, title, value, status, description, badge, badgeColor }) => (\r\n  <div className={cn(\r\n    \"bg-card rounded-2xl p-6 shadow-lg border\",\r\n    \"border-border hover:shadow-xl transition-all duration-200\"\r\n  )}>\r\n    <div className=\"flex items-center justify-between mb-4\">\r\n      <div className={cn(\"p-3 rounded-lg\", getAlertColor(status))}>\r\n        <Icon className=\"w-8 h-8\" />\r\n      </div>\r\n      <div className=\"flex items-center space-x-2\">\r\n        <span className={cn(\r\n          \"px-3 py-1 rounded-full text-xs font-medium\",\r\n          badgeColor\r\n        )}>\r\n          {badge}\r\n        </span>\r\n        <span className=\"text-lg\">{getAlertIcon(status)}</span>\r\n      </div>\r\n    </div>\r\n    <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">\r\n      {title}\r\n    </h3>\r\n    <div className=\"text-3xl font-bold text-card-foreground mb-2\">\r\n      {value}\r\n    </div>\r\n    <div className=\"text-sm text-muted-foreground mb-3\">\r\n      {description}\r\n    </div>\r\n    {typeof value === 'number' && <ProgressBar value={value} status={status} />}\r\n  </div>\r\n)\r\n\r\nconst SystemMetricsComponent: React.FC = memo(() => {\r\n  const { metrics, loading, error, fetchMetrics } = useSystemMetrics()\r\n  const [selectedTimeframe, setSelectedTimeframe] = useState<'1h' | '6h' | '24h'>('1h')\r\n  const [showDetailedMetrics, setShowDetailedMetrics] = useState(false)\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-background text-foreground\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n          <PageHeader title=\"Systeem Metrics\" subtitle=\"Live Monitoring\" />\r\n          <div className=\"text-center py-12\">\r\n            <h2 className=\"text-xl font-semibold text-card-foreground mb-2\">\r\n              Laden Systeem Metrics...\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Error state\r\n  if (error || !metrics) {\r\n    return (\r\n      <div className=\"min-h-screen bg-background text-foreground\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n          <PageHeader title=\"Systeem Metrics\" subtitle=\"Live Monitoring\" />\r\n          <ErrorDisplay \r\n            error={error} \r\n            onRetry={fetchMetrics}\r\n            variant=\"card\"\r\n            className=\"mt-6\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Parse agent-based metrics for alerts\r\n  const cpuValue = parseInt(metrics.system_health.cpu_usage) || 0\r\n  const memoryValue = parseInt(metrics.system_health.memory_usage) || 0\r\n  const successRate = metrics.system_health.agent_success_rate || 0\r\n  const responseTime = metrics.system_health.average_response_time || 0\r\n\r\n  // Export function\r\n  const handleExport = () => {\r\n    const data = JSON.stringify(metrics, null, 2)\r\n    const blob = new Blob([data], { type: 'application/json' })\r\n    const url = URL.createObjectURL(blob)\r\n    const a = document.createElement('a')\r\n    a.href = url\r\n    a.download = `systeem-metrics-${new Date().toISOString().split('T')[0]}.json`\r\n    a.click()\r\n    URL.revokeObjectURL(url)\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-background text-foreground\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\r\n        \r\n        {/* Header with Export */}\r\n        <PageHeader\r\n          title=\"Systeem Metrics\"\r\n          subtitle=\"Live Monitoring\"\r\n        >\r\n          {/* Timeframe Selector */}\r\n          <div className=\"flex bg-muted rounded-lg p-1\">\r\n            {(['1h', '6h', '24h'] as const).map((timeframe) => (\r\n              <button\r\n                key={timeframe}\r\n                onClick={() => setSelectedTimeframe(timeframe)}\r\n                className={cn(\r\n                  \"px-3 py-1 rounded-md text-sm font-medium transition-all duration-200\",\r\n                  selectedTimeframe === timeframe\r\n                    ? \"bg-background text-foreground shadow-sm\"\r\n                    : \"text-muted-foreground hover:text-foreground\"\r\n                )}\r\n              >\r\n                {timeframe}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          {/* Export Button */}\r\n          <button\r\n            onClick={handleExport}\r\n            className=\"p-2 rounded-lg bg-secondary hover:bg-secondary/80 transition-colors duration-200\"\r\n            title=\"Export Metrics\"\r\n          >\r\n            <Download className=\"w-5 h-5\" />\r\n          </button>\r\n        </PageHeader>\r\n\r\n        {/* System Health Overview */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"bg-card rounded-2xl p-8 shadow-lg border border-border\">\r\n            <div className=\"flex items-center justify-between mb-6\">\r\n              <h2 className=\"text-xl font-semibold text-card-foreground\">\r\n                BMAD Agent Systeem Gezondheid\r\n              </h2>\r\n              <button\r\n                onClick={() => setShowDetailedMetrics(!showDetailedMetrics)}\r\n                className=\"px-3 py-1 rounded-lg text-sm font-medium bg-secondary text-secondary-foreground hover:bg-secondary/80 transition-all duration-200\"\r\n              >\r\n                {showDetailedMetrics ? 'Details Verbergen' : 'Details Tonen'}\r\n              </button>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n              \r\n              {/* Agent CPU Usage Card */}\r\n              <MetricCard\r\n                icon={Cpu}\r\n                title=\"Agent CPU Gebruik\"\r\n                value={`${cpuValue}%`}\r\n                status={getAlertStatus(cpuValue, ALERT_THRESHOLDS.cpu)}\r\n                description=\"Gemiddeld CPU gebruik van alle agents\"\r\n                badge=\"Agent CPU\"\r\n                badgeColor=\"bg-blue-500 text-white\"\r\n              />\r\n\r\n              {/* Agent Memory Usage Card */}\r\n              <MetricCard\r\n                icon={HardDrive}\r\n                title=\"Agent Geheugen\"\r\n                value={`${memoryValue}%`}\r\n                status={getAlertStatus(memoryValue, ALERT_THRESHOLDS.memory)}\r\n                description=\"Gemiddeld geheugen gebruik van alle agents\"\r\n                badge=\"Agent RAM\"\r\n                badgeColor=\"bg-green-500 text-white\"\r\n              />\r\n\r\n              {/* Agent Success Rate Card */}\r\n              <MetricCard\r\n                icon={TrendingUp}\r\n                title=\"Agent Success Rate\"\r\n                value={`${successRate}%`}\r\n                status={getAlertStatus(successRate, { warning: 70, critical: 50 })}\r\n                description=\"Percentage succesvolle agent taken\"\r\n                badge=\"Success\"\r\n                badgeColor=\"bg-purple-500 text-white\"\r\n              />\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Detailed Metrics */}\r\n        {showDetailedMetrics && (\r\n          <div className=\"mb-8\">\r\n            <div className=\"bg-card rounded-2xl p-8 shadow-lg border border-border\">\r\n              <h2 className=\"text-xl font-semibold text-card-foreground mb-6\">\r\n                Gedetailleerde Metingen\r\n              </h2>\r\n              \r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n                \r\n                {/* Agent CPU Usage */}\r\n                <div className=\"bg-muted rounded-lg p-4\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <h3 className=\"font-medium text-card-foreground\">Agent CPU Gebruik</h3>\r\n                    <span className=\"text-sm text-muted-foreground\">{cpuValue}%</span>\r\n                  </div>\r\n                  <ProgressBar value={cpuValue} status={getAlertStatus(cpuValue, ALERT_THRESHOLDS.cpu)} />\r\n                </div>\r\n\r\n                {/* Agent Memory Usage */}\r\n                <div className=\"bg-muted rounded-lg p-4\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <h3 className=\"font-medium text-card-foreground\">Agent Geheugen</h3>\r\n                    <span className=\"text-sm text-muted-foreground\">{memoryValue}%</span>\r\n                  </div>\r\n                  <ProgressBar value={memoryValue} status={getAlertStatus(memoryValue, ALERT_THRESHOLDS.memory)} />\r\n                </div>\r\n\r\n                {/* Agent Success Rate */}\r\n                <div className=\"bg-muted rounded-lg p-4\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <h3 className=\"font-medium text-card-foreground\">Agent Success Rate</h3>\r\n                    <span className=\"text-sm text-muted-foreground\">{successRate}%</span>\r\n                  </div>\r\n                  <ProgressBar value={successRate} status={getAlertStatus(successRate, { warning: 70, critical: 50 })} />\r\n                </div>\r\n\r\n                {/* Agent Response Time */}\r\n                <div className=\"bg-muted rounded-lg p-4\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <h3 className=\"font-medium text-card-foreground\">Gemiddelde Response Time</h3>\r\n                    <span className=\"text-sm text-muted-foreground\">{responseTime}ms</span>\r\n                  </div>\r\n                  <div className=\"text-2xl font-bold text-blue-500\">⚡</div>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Performance Trends */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"bg-card rounded-2xl p-8 shadow-lg border border-border\">\r\n            <div className=\"flex items-center space-x-3 mb-6\">\r\n              <TrendingUp className=\"w-6 h-6 text-primary\" />\r\n              <h2 className=\"text-xl font-semibold text-card-foreground\">\r\n                Prestatie Trends\r\n              </h2>\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n              \r\n              {/* CPU Trend */}\r\n              <div className=\"bg-muted rounded-lg p-4\">\r\n                <h3 className=\"font-medium text-card-foreground mb-3\">CPU Trend</h3>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-2xl font-bold text-card-foreground\">\r\n                    {cpuValue}%\r\n                  </span>\r\n                  <span className=\"text-sm text-muted-foreground\">\r\n                    Gemiddeld over {selectedTimeframe}\r\n                  </span>\r\n                </div>\r\n                <div className=\"mt-3 h-2 bg-background rounded-full\">\r\n                  <div \r\n                    className=\"h-2 bg-primary rounded-full transition-all duration-300\"\r\n                    style={{ width: `${cpuValue}%` }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              {/* Memory Trend */}\r\n              <div className=\"bg-muted rounded-lg p-4\">\r\n                <h3 className=\"font-medium text-card-foreground mb-3\">Geheugen Trend</h3>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-2xl font-bold text-card-foreground\">\r\n                    {memoryValue}%\r\n                  </span>\r\n                  <span className=\"text-sm text-muted-foreground\">\r\n                    Gemiddeld over {selectedTimeframe}\r\n                  </span>\r\n                </div>\r\n                <div className=\"mt-3 h-2 bg-background rounded-full\">\r\n                  <div \r\n                    className=\"h-2 bg-green-500 rounded-full transition-all duration-300\"\r\n                    style={{ width: `${memoryValue}%` }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Performance Testing Section */}\r\n        <div className=\"mb-8\">\r\n          <PerformanceTest \r\n            onComplete={() => {\r\n              // Performance results are logged by the component itself\r\n            }}\r\n          />\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport const SystemMetrics = SystemMetricsComponent\r\nexport default SystemMetricsComponent "],"names":["CheckCircle","createLucideIcon","Download","Server","XCircle","ErrorDisplay","error","onRetry","variant","className","getErrorIcon","errorMessage","jsx","Wifi","AlertTriangle","getErrorColor","getErrorMessage","errorIcon","errorColor","userMessage","jsxs","cn","RefreshCw","PerformanceTest","onComplete","isRunning","setIsRunning","useState","results","setResults","currentTest","setCurrentTest","tests","start","resolve","duration","response","memoryUsageMB","isSmooth","frameCount","lastTime","testScroll","currentTime","fps","runTest","useCallback","test","result","prev","r","runAllTests","stopTests","passedTests","totalTests","Square","Play","isCurrent","Clock","Zap","ALERT_THRESHOLDS","getAlertStatus","value","thresholds","getAlertColor","status","getAlertIcon","ProgressBar","MetricCard","Icon","title","description","badge","badgeColor","SystemMetricsComponent","memo","metrics","loading","fetchMetrics","useSystemMetrics","selectedTimeframe","setSelectedTimeframe","showDetailedMetrics","setShowDetailedMetrics","PageHeader","cpuValue","memoryValue","successRate","responseTime","handleExport","data","blob","url","a","timeframe","Cpu","HardDrive","TrendingUp","SystemMetrics"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}