{"name": "test_agent_notify", "status": "broken", "statusDetails": {"message": "Exception: [Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}", "trace": "@pytest.mark.skipif(os.getenv(\"CI\") == \"true\" or not os.getenv(\"SLACK_BOT_TOKEN\"), reason=\"Handmatige test, niet geschikt voor CI of zonder Slack token\")\n    def test_agent_notify():\n        channel = os.getenv(\"SLACK_DEFAULT_CHANNEL\", \"C097FTDU1A5\")\n>       send_slack_message(\"Testnotificatie vanuit agent_notify_test.py\", channel, use_api=True)\n\ntests/fixtures/mocks/agent_notify_test.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = 'Testnotificatie vanuit agent_notify_test.py', channel = 'C097FTDU1A5', feedback_id = None\nuse_api = True, blocks = None\n\n    def send_slack_message(text, channel=None, feedback_id=None, use_api=False, blocks=None):\n        \"\"\"\n        Stuur een bericht naar Slack via webhook of chat.postMessage API.\n        :param text: Berichttekst (str)\n        :param channel: Slack-kanaal of user-id (str)\n        :param feedback_id: Optioneel, unieke id voor feedback tracking\n        :param use_api: Gebruik Slack API (chat.postMessage) i.p.v. webhook\n        :param blocks: Optioneel, Slack Block Kit blocks (list)\n        \"\"\"\n        if use_api:\n            if not SLACK_BOT_TOKEN:\n                raise ValueError(\"SLACK_BOT_TOKEN is niet ingesteld!\")\n            url = \"https://slack.com/api/chat.postMessage\"\n            headers = {\n                \"Authorization\": f\"Bearer {SLACK_BOT_TOKEN}\",\n                \"Content-Type\": \"application/json; charset=utf-8\"\n            }\n            payload = {\"text\": text}\n            if channel:\n                payload[\"channel\"] = channel\n            if blocks:\n                payload[\"blocks\"] = blocks\n            elif feedback_id:\n                payload[\"blocks\"] = _feedback_blocks(text, feedback_id)\n            # Debug prints\n            print(\"DEBUG SLACK_BOT_TOKEN:\", os.getenv(\"SLACK_BOT_TOKEN\"))\n            print(\"DEBUG channel:\", channel)\n            print(\"DEBUG type(channel):\", type(channel))\n            print(\"DEBUG repr(channel):\", repr(channel))\n            response = requests.post(url, headers=headers, json=payload)\n            print(\"[Slack API] Response:\", response.status_code, response.text)\n            if not response.ok or not response.json().get(\"ok\"):\n>               raise Exception(f\"[Slack] Notificatie mislukt: {response.status_code} {response.text}\")\nE               Exception: [Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}\n\nintegrations/slack/slack_notify.py:48: Exception"}, "attachments": [{"name": "stdout", "source": "cbab843b-a366-4d11-bbf0-a5a8c1f7af08-attachment.txt", "type": "text/plain"}], "start": 1753819409621, "stop": 1753819409820, "uuid": "deb12125-84a3-4641-b707-1d6a8d30a938", "historyId": "4d91c62c4502210ac56f6a73a7d995d7", "testCaseId": "4d91c62c4502210ac56f6a73a7d995d7", "fullName": "tests.fixtures.mocks.agent_notify_test#test_agent_notify", "labels": [{"name": "parentSuite", "value": "tests.fixtures.mocks"}, {"name": "suite", "value": "agent_notify_test"}, {"name": "host", "value": "Yannick-Mac-Gillavry-werk.local"}, {"name": "thread", "value": "90219-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.fixtures.mocks.agent_notify_test"}], "titlePath": ["tests", "fixtures", "mocks", "agent_notify_test.py"]}