{"name": "test_automated_deployment", "status": "broken", "statusDetails": {"message": "Exception: [Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}", "trace": "def test_automated_deployment():\n        orch = OrchestratorAgent()\n        logging.info(\"[TEST] Start automated_deployment workflow test...\")\n>       orch.start_workflow(\"automated_deployment\", slack_channel=\"#devops-alerts\")\n\ntests/integration/workflows/test_orchestrator_workflow.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbmad/agents/Agent/Orchestrator/orchestrator.py:756: in start_workflow\n    send_slack_message(f\":rocket: Workflow *{workflow_name}* gestart door Orchestrator.\", channel=slack_channel, use_api=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = ':rocket: Workflow *automated_deployment* gestart door Orchestrator.', channel = '#devops-alerts'\nfeedback_id = None, use_api = True, blocks = None\n\n    def send_slack_message(text, channel=None, feedback_id=None, use_api=False, blocks=None):\n        \"\"\"\n        Stuur een bericht naar Slack via webhook of chat.postMessage API.\n        :param text: Berichttekst (str)\n        :param channel: Slack-kanaal of user-id (str)\n        :param feedback_id: Optioneel, unieke id voor feedback tracking\n        :param use_api: Gebruik Slack API (chat.postMessage) i.p.v. webhook\n        :param blocks: Optioneel, Slack Block Kit blocks (list)\n        \"\"\"\n        if use_api:\n            if not SLACK_BOT_TOKEN:\n                raise ValueError(\"SLACK_BOT_TOKEN is niet ingesteld!\")\n            url = \"https://slack.com/api/chat.postMessage\"\n            headers = {\n                \"Authorization\": f\"Bearer {SLACK_BOT_TOKEN}\",\n                \"Content-Type\": \"application/json; charset=utf-8\"\n            }\n            payload = {\"text\": text}\n            if channel:\n                payload[\"channel\"] = channel\n            if blocks:\n                payload[\"blocks\"] = blocks\n            elif feedback_id:\n                payload[\"blocks\"] = _feedback_blocks(text, feedback_id)\n            # Debug prints\n            print(\"DEBUG SLACK_BOT_TOKEN:\", os.getenv(\"SLACK_BOT_TOKEN\"))\n            print(\"DEBUG channel:\", channel)\n            print(\"DEBUG type(channel):\", type(channel))\n            print(\"DEBUG repr(channel):\", repr(channel))\n            response = requests.post(url, headers=headers, json=payload)\n            print(\"[Slack API] Response:\", response.status_code, response.text)\n            if not response.ok or not response.json().get(\"ok\"):\n>               raise Exception(f\"[Slack] Notificatie mislukt: {response.status_code} {response.text}\")\nE               Exception: [Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}\n\nintegrations/slack/slack_notify.py:48: Exception"}, "attachments": [{"name": "stdout", "source": "3f13ec67-dab8-4a35-baeb-8eda1dfbd11f-attachment.txt", "type": "text/plain"}], "start": 1753819428361, "stop": 1753819428585, "uuid": "a7c1bde1-7dec-482f-a749-c6ac927bf635", "historyId": "25a4a512e853ce659d5237f60ff92764", "testCaseId": "25a4a512e853ce659d5237f60ff92764", "fullName": "tests.integration.workflows.test_orchestrator_workflow#test_automated_deployment", "labels": [{"name": "parentSuite", "value": "tests.integration.workflows"}, {"name": "suite", "value": "test_orchestrator_workflow"}, {"name": "host", "value": "Yannick-Mac-Gillavry-werk.local"}, {"name": "thread", "value": "90219-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.integration.workflows.test_orchestrator_workflow"}], "titlePath": ["tests", "integration", "workflows", "test_orchestrator_workflow.py"]}