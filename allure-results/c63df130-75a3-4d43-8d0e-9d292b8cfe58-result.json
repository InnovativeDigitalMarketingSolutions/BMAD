{"name": "test_llm_caching_decorator", "status": "failed", "statusDetails": {"message": "AssertionError: None is not an instance of <class 'dict'>", "trace": "self = <tests.unit.core.test_optimizations.TestLLMCaching testMethod=test_llm_caching_decorator>\n\n    def test_llm_caching_decorator(self):\n        \"\"\"Test LLM caching decorator: cache miss (API call) en cache hit (uit Redis).\"\"\"\n        from bmad.agents.core.ai.llm_client import ask_openai_with_confidence\n        import json\n    \n        with patch('bmad.agents.core.ai.llm_client.requests.post') as mock_post, \\\n             patch('bmad.agents.core.ai.llm_client.OPENAI_API_KEY', 'test_key'), \\\n             patch('bmad.agents.core.ai.llm_client._file_cache_get', return_value=None), \\\n             patch('bmad.agents.core.data.redis_cache.get_redis_client') as mock_get_redis_client:\n            # Mock OpenAI API response\n            mock_response = MagicMock()\n            mock_response.status_code = 200\n            mock_response.json.return_value = {\n                \"choices\": [{\"message\": {\"content\": \"Test response\"}}],\n                \"usage\": {\"total_tokens\": 10}\n            }\n            mock_post.return_value = mock_response\n    \n            # Mock Redis client\n            mock_redis_client = MagicMock()\n            # First call: cache miss\n            mock_redis_client.get.return_value = None\n            mock_redis_client.setex.return_value = True\n            mock_get_redis_client.return_value = mock_redis_client\n    \n            # Eerste call: cache miss, API wordt aangeroepen\n            result1 = ask_openai_with_confidence(\"Test prompt\")\n            self.assertIsInstance(result1, dict)\n            self.assertIn(\"answer\", result1)\n            self.assertIn(\"llm_confidence\", result1)\n            self.assertEqual(result1[\"answer\"], \"Test response\")\n            self.assertTrue(mock_redis_client.setex.called)\n            self.assertEqual(mock_post.call_count, 1)\n    \n            # Tweede call: cache hit, API wordt NIET opnieuw aangeroepen\n            cached_data = json.dumps({\n                \"answer\": \"Test response\",\n                \"llm_confidence\": 0.85\n            })\n            mock_redis_client.get.return_value = cached_data\n            result2 = ask_openai_with_confidence(\"Test prompt\")\n>           self.assertIsInstance(result2, dict)\nE           AssertionError: None is not an instance of <class 'dict'>\n\ntests/unit/core/test_optimizations.py:147: AssertionError"}, "description": "Test LLM caching decorator: cache miss (API call) en cache hit (uit Redis).", "attachments": [{"name": "log", "source": "3b568ea2-6cf1-40fb-88cb-177a135b12b6-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "b5abc02f-7c8a-4909-9fc7-510de14c1ce0-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "2d6a79a4-577a-43ae-b98e-df4ba392c08b-attachment.txt", "type": "text/plain"}], "start": 1753819435130, "stop": 1753819435132, "uuid": "dd024298-4da1-46a0-b9f4-0b119a4daf52", "historyId": "4930ff40d587de2fc8e105c4a4ba98dc", "testCaseId": "4930ff40d587de2fc8e105c4a4ba98dc", "fullName": "tests.unit.core.test_optimizations.TestLLMCaching#test_llm_caching_decorator", "labels": [{"name": "parentSuite", "value": "tests.unit.core"}, {"name": "suite", "value": "test_optimizations"}, {"name": "subSuite", "value": "TestLLMCaching"}, {"name": "host", "value": "Yannick-Mac-Gillavry-werk.local"}, {"name": "thread", "value": "90219-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.unit.core.test_optimizations"}], "titlePath": ["tests", "unit", "core", "test_optimizations.py", "TestLLMCaching"]}