{"name": "test_slack_error_handling", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'channel_not_found' in '[Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}'\n +  where '[Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}' = str(Exception('[Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}'))", "trace": "def test_slack_error_handling():\n        try:\n>           send_slack_message(\"Dit zou moeten falen (ongeldige channel)\", \"INVALID_CHANNEL_ID\", use_api=True)\n\ntests/fixtures/mocks/slack_error_handling_test.py:5: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntext = 'Dit zou moeten falen (ongeldige channel)', channel = 'INVALID_CHANNEL_ID', feedback_id = None\nuse_api = True, blocks = None\n\n    def send_slack_message(text, channel=None, feedback_id=None, use_api=False, blocks=None):\n        \"\"\"\n        Stuur een bericht naar Slack via webhook of chat.postMessage API.\n        :param text: Berichttekst (str)\n        :param channel: Slack-kanaal of user-id (str)\n        :param feedback_id: Optioneel, unieke id voor feedback tracking\n        :param use_api: Gebruik Slack API (chat.postMessage) i.p.v. webhook\n        :param blocks: Optioneel, Slack Block Kit blocks (list)\n        \"\"\"\n        if use_api:\n            if not SLACK_BOT_TOKEN:\n                raise ValueError(\"SLACK_BOT_TOKEN is niet ingesteld!\")\n            url = \"https://slack.com/api/chat.postMessage\"\n            headers = {\n                \"Authorization\": f\"Bearer {SLACK_BOT_TOKEN}\",\n                \"Content-Type\": \"application/json; charset=utf-8\"\n            }\n            payload = {\"text\": text}\n            if channel:\n                payload[\"channel\"] = channel\n            if blocks:\n                payload[\"blocks\"] = blocks\n            elif feedback_id:\n                payload[\"blocks\"] = _feedback_blocks(text, feedback_id)\n            # Debug prints\n            print(\"DEBUG SLACK_BOT_TOKEN:\", os.getenv(\"SLACK_BOT_TOKEN\"))\n            print(\"DEBUG channel:\", channel)\n            print(\"DEBUG type(channel):\", type(channel))\n            print(\"DEBUG repr(channel):\", repr(channel))\n            response = requests.post(url, headers=headers, json=payload)\n            print(\"[Slack API] Response:\", response.status_code, response.text)\n            if not response.ok or not response.json().get(\"ok\"):\n>               raise Exception(f\"[Slack] Notificatie mislukt: {response.status_code} {response.text}\")\nE               Exception: [Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}\n\nintegrations/slack/slack_notify.py:48: Exception\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_slack_error_handling():\n        try:\n            send_slack_message(\"Dit zou moeten falen (ongeldige channel)\", \"INVALID_CHANNEL_ID\", use_api=True)\n        except Exception as e:\n>           assert \"channel_not_found\" in str(e)\nE           assert 'channel_not_found' in '[Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}'\nE            +  where '[Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}' = str(Exception('[Slack] Notificatie mislukt: 200 {\"ok\":false,\"error\":\"invalid_auth\"}'))\n\ntests/fixtures/mocks/slack_error_handling_test.py:7: AssertionError"}, "attachments": [{"name": "stdout", "source": "287fbac1-236c-4e1e-83a7-83d39cee1380-attachment.txt", "type": "text/plain"}], "start": 1753819410103, "stop": 1753819410295, "uuid": "b0cdcd5c-ae14-4a17-baa3-37639e1e6da0", "historyId": "9a95cb81c9a3aec65e857961ae6d0654", "testCaseId": "9a95cb81c9a3aec65e857961ae6d0654", "fullName": "tests.fixtures.mocks.slack_error_handling_test#test_slack_error_handling", "labels": [{"name": "parentSuite", "value": "tests.fixtures.mocks"}, {"name": "suite", "value": "slack_error_handling_test"}, {"name": "host", "value": "Yannick-Mac-Gillavry-werk.local"}, {"name": "thread", "value": "90219-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.fixtures.mocks.slack_error_handling_test"}], "titlePath": ["tests", "fixtures", "mocks", "slack_error_handling_test.py"]}