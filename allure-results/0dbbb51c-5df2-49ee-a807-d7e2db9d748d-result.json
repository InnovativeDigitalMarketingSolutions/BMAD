{"name": "test_save_and_get_context", "status": "broken", "statusDetails": {"message": "postgrest.exceptions.APIError: {'message': 'JSON could not be generated', 'code': 401, 'hint': 'Refer to full message for details', 'details': 'b\\'{\"message\":\"Invalid API key\",\"hint\":\"Double check your Supabase `anon` or `service_role` API key.\"}\\''}", "trace": "self = <postgrest._sync.request_builder.SyncQueryRequestBuilder object at 0x11b3cd590>\n\n    def execute(self) -> APIResponse[_ReturnT]:\n        \"\"\"Execute the query.\n    \n        .. tip::\n            This is the last method called, after the query is built.\n    \n        Returns:\n            :class:`APIResponse`\n    \n        Raises:\n            :class:`APIError` If the API raised an error.\n        \"\"\"\n        r = self.session.request(\n            self.http_method,\n            self.path,\n            json=self.json,\n            params=self.params,\n            headers=self.headers,\n        )\n        try:\n            if r.is_success:\n                if self.http_method != \"HEAD\":\n                    body = r.text\n                    if self.headers.get(\"Accept\") == \"text/csv\":\n                        return body\n                    if self.headers.get(\n                        \"Accept\"\n                    ) and \"application/vnd.pgrst.plan\" in self.headers.get(\"Accept\"):\n                        if \"+json\" not in self.headers.get(\"Accept\"):\n                            return body\n                return APIResponse[_ReturnT].from_http_request_response(r)\n            else:\n>               json_obj = model_validate_json(APIErrorFromJSON, r.content)\n                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\npath/to/venv/lib/python3.13/site-packages/postgrest/_sync/request_builder.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmodel = <class 'postgrest.exceptions.APIErrorFromJSON'>\ncontents = b'{\"message\":\"Invalid API key\",\"hint\":\"Double check your Supabase `anon` or `service_role` API key.\"}'\n\n    def model_validate_json(model: Type[TBaseModel], contents) -> TBaseModel:\n        \"\"\"Compatibility layer between pydantic 1 and 2 for parsing an instance\n        of a BaseModel from varied\"\"\"\n        try:\n            # pydantic > 2\n>           return model.model_validate_json(contents)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE           pydantic_core._pydantic_core.ValidationError: 2 validation errors for APIErrorFromJSON\nE           code\nE             Field required [type=missing, input_value={'message': 'Invalid API ...service_role` API key.'}, input_type=dict]\nE               For further information visit https://errors.pydantic.dev/2.11/v/missing\nE           details\nE             Field required [type=missing, input_value={'message': 'Invalid API ...service_role` API key.'}, input_type=dict]\nE               For further information visit https://errors.pydantic.dev/2.11/v/missing\n\npath/to/venv/lib/python3.13/site-packages/postgrest/utils.py:69: ValidationError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_save_and_get_context():\n        agent_name = f\"TestAgent_{uuid.uuid4()}\"\n        context_type = \"test\"\n        test_data = {\"foo\": \"bar\", \"number\": 42}\n        # Sla context op\n>       save_context(agent_name, context_type, test_data)\n\ntests/integration/agents/test_bmad_agents_resource.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbmad/agents/core/data/supabase_context.py:53: in save_context\n    raise e\nbmad/agents/core/data/supabase_context.py:44: in save_context\n    supabase.table(CONTEXT_TABLE).upsert(data, on_conflict=on_conflict).execute()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <postgrest._sync.request_builder.SyncQueryRequestBuilder object at 0x11b3cd590>\n\n    def execute(self) -> APIResponse[_ReturnT]:\n        \"\"\"Execute the query.\n    \n        .. tip::\n            This is the last method called, after the query is built.\n    \n        Returns:\n            :class:`APIResponse`\n    \n        Raises:\n            :class:`APIError` If the API raised an error.\n        \"\"\"\n        r = self.session.request(\n            self.http_method,\n            self.path,\n            json=self.json,\n            params=self.params,\n            headers=self.headers,\n        )\n        try:\n            if r.is_success:\n                if self.http_method != \"HEAD\":\n                    body = r.text\n                    if self.headers.get(\"Accept\") == \"text/csv\":\n                        return body\n                    if self.headers.get(\n                        \"Accept\"\n                    ) and \"application/vnd.pgrst.plan\" in self.headers.get(\"Accept\"):\n                        if \"+json\" not in self.headers.get(\"Accept\"):\n                            return body\n                return APIResponse[_ReturnT].from_http_request_response(r)\n            else:\n                json_obj = model_validate_json(APIErrorFromJSON, r.content)\n                raise APIError(dict(json_obj))\n        except ValidationError as e:\n>           raise APIError(generate_default_error_message(r))\nE           postgrest.exceptions.APIError: {'message': 'JSON could not be generated', 'code': 401, 'hint': 'Refer to full message for details', 'details': 'b\\'{\"message\":\"Invalid API key\",\"hint\":\"Double check your Supabase `anon` or `service_role` API key.\"}\\''}\n\npath/to/venv/lib/python3.13/site-packages/postgrest/_sync/request_builder.py:80: APIError"}, "start": 1753819417839, "stop": 1753819417927, "uuid": "778942ed-2df2-4221-b964-31a406bb77c1", "historyId": "ecd40d1aeaf57535ac889414615b080a", "testCaseId": "ecd40d1aeaf57535ac889414615b080a", "fullName": "tests.integration.agents.test_bmad_agents_resource#test_save_and_get_context", "labels": [{"name": "parentSuite", "value": "tests.integration.agents"}, {"name": "suite", "value": "test_bmad_agents_resource"}, {"name": "host", "value": "Yannick-Mac-Gillavry-werk.local"}, {"name": "thread", "value": "90219-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.integration.agents.test_bmad_agents_resource"}], "titlePath": ["tests", "integration", "agents", "test_bmad_agents_resource.py"]}